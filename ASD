import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from imblearn.over_sampling import ADASYN

# Load and preprocess data (replace with your data loading and preprocessing steps)
data = pd.read_csv('your_dataset.csv')
X = data['text']
y = data['label']

# Handle imbalanced classes using ADASYN
adasyn = ADASYN(random_state=42)
X_resampled, y_resampled = adasyn.fit_resample(X, y)

# TF-IDF vectorization
tfidf_vectorizer = TfidfVectorizer(max_features=5000)  # You can adjust max_features
X_tfidf = tfidf_vectorizer.fit_transform(X_resampled)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y_resampled, test_size=0.2, random_state=42)

# Hyperparameter grids for RandomizedSearchCV
param_dist_dt = {
    'criterion': ['gini', 'entropy'],
    'max_depth': [None, 10, 20, 30, 40],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

param_dist_svm = {
    'C': [0.1, 1, 10],
    'kernel': ['linear', 'poly', 'rbf', 'sigmoid'],
    'gamma': ['scale', 'auto'] + [0.01, 0.1, 1, 10]
}

param_dist_nb = {
    'alpha': [0.1, 0.5, 1.0]
}

param_dist_lr = {
    'C': [0.1, 1, 10],
    'max_iter': [100, 200, 300],
    'solver': ['newton-cg', 'lbfgs', 'liblinear']
}

# Models to consider
models = [
    (DecisionTreeClassifier(), param_dist_dt),
    (SVC(), param_dist_svm),
    (MultinomialNB(), param_dist_nb),
    (LogisticRegression(), param_dist_lr)
]

# Find the best model using RandomizedSearchCV
best_accuracy = 0
best_model = None

for model, param_dist in models:
    random_search = RandomizedSearchCV(model, param_distributions=param_dist, n_iter=10, scoring='accuracy', cv=3, random_state=42)
    random_search.fit(X_train, y_train)
    y_pred = random_search.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_model = random_search.best_estimator_

print("Best Model:", best_model)
print("Best Accuracy:", best_accuracy)

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import RandomizedSearchCV
from sklearn.tree import DecisionTreeClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import MultinomialNB
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from imblearn.over_sampling import ADASYN
# Load your dataset (assuming you have 'text' and 'label' columns)
data = pd.read_csv('your_dataset.csv')

# Preprocess your text data here (tokenization, lowercasing, etc.)
X = data['text']
y = data['label']

adasyn = ADASYN(random_state=42)
X_resampled, y_resampled = adasyn.fit_resample(X, y)
tfidf_vectorizer = TfidfVectorizer(max_features=5000)  # You can adjust max_features
X_tfidf = tfidf_vectorizer.fit_transform(X_resampled)
X_train, X_test, y_train, y_test = train_test_split(X_tfidf, y_resampled, test_size=0.2, random_state=42)
# Define hyperparameter grids for each model
param_dist_dt = {...}  # Hyperparameters for Decision Tree
param_dist_svm = {...}  # Hyperparameters for SVM
param_dist_nb = {...}  # Hyperparameters for Naive Bayes
param_dist_lr = {...}  # Hyperparameters for Linear Regression

# Initialize models
dt_model = DecisionTreeClassifier()
svm_model = SVC()
nb_model = MultinomialNB()
lr_model = LogisticRegression()

# Perform RandomizedSearchCV for each model
models = [dt_model, svm_model, nb_model, lr_model]
param_dists = [param_dist_dt, param_dist_svm, param_dist_nb, param_dist_lr]
best_models = []

for model, param_dist in zip(models, param_dists):
    random_search = RandomizedSearchCV(model, param_distributions=param_dist, n_iter=10, scoring='accuracy', cv=3, random_state=42)
    random_search.fit(X_train, y_train)
    best_models.append(random_search.best_estimator_)
best_accuracy = 0
best_model = None

for model in best_models:
    y_pred = model.predict(X_test)
    accuracy = accuracy_score(y_test, y_pred)
    
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_model = model

print("Best Model:", best_model)
print("Best Accuracy:", best_accuracy)
